index.js

const express = require('express');
const cors = require('cors');
const mysql = require('mysql2');

const app = express();
const port = 3000;

app.use(cors());
app.use(express.json()); // Asegúrate de que el cuerpo de las solicitudes se pueda analizar como JSON

// Crear una conexión a la base de datos MySQL
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'Quintomendi05912!',
  database: 'inmobiliariacaba'
});

connection.connect((err) => {
  if (err) {
    console.error('Error al conectar a la base de datos: ', err);
    return;
  }
  console.log('Conectado a la base de datos MySQL');
});

// Ruta para verificar la conexión
app.get('/', (req, res) => {
  connection.query('SELECT 1 + 1 AS solution', (err, results) => {
    if (err) {
      console.error('Error al ejecutar la consulta: ', err);
      res.status(500).send('Error en el servidor');
      return;
    }
    res.send(`La solución es: ${results[0].solution}`);
  });
});

// Ruta para obtener todos los ítems (GET /items)
//http://localhost:3000/items
app.post('/clientes', (req, res) => {
  const { Nombre, Dirección, Teléfono, Email, ID_Metodo } = req.body;
  const query = 'INSERT INTO Clientes (Nombre, Dirección, Teléfono, Email, ID_Metodo) VALUES (?, ?, ?, ?, ?)';
  connection.query(query, [Nombre, Dirección, Teléfono, Email, ID_Metodo], (err, results) => {
      if (err) {
          console.error('Error al crear cliente:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.status(201).send('Cliente creado exitosamente');
      }
  });
});

// Obtener todos los clientes
app.get('/clientes', (req, res) => {
  connection.query('SELECT * FROM Clientes', (err, results) => {
      if (err) {
          console.error('Error al obtener los clientes:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.json(results);
      }
  });
});

// Actualizar un cliente
app.put('/clientes/:id', (req, res) => {
  const { id } = req.params;
  const { Nombre, Dirección, Teléfono, Email, ID_Metodo } = req.body;
  const query = 'UPDATE Clientes SET Nombre = ?, Dirección = ?, Teléfono = ?, Email = ?, ID_Metodo = ? WHERE ID_Cliente = ?';
  connection.query(query, [Nombre, Dirección, Teléfono, Email, ID_Metodo, id], (err, results) => {
      if (err) {
          console.error('Error al actualizar cliente:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.send('Cliente actualizado exitosamente');
      }
  });
});

// Eliminar un cliente
app.delete('/clientes/:id', (req, res) => {
  const { id } = req.params;
  const query = 'DELETE FROM Clientes WHERE ID_Cliente = ?';
  connection.query(query, [id], (err, results) => {
      if (err) {
          console.error('Error al eliminar cliente:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.send('Cliente eliminado exitosamente');
      }
  });
});

app.post('/productos', (req, res) => {
  const { Nombre_Producto, Descripción, Precio, Tipo } = req.body;
  const query = 'INSERT INTO Productos (Nombre_Producto, Descripción, Precio, Tipo) VALUES (?, ?, ?, ?)';
  connection.query(query, [Nombre_Producto, Descripción, Precio, Tipo], (err, results) => {
      if (err) {
          console.error('Error al crear producto:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.status(201).send('Producto creado exitosamente');
      }
  });
});

// Obtener todos los productos
app.get('/productos', (req, res) => {
  connection.query('SELECT * FROM Productos', (err, results) => {
      if (err) {
          console.error('Error al obtener los productos:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.json(results);
      }
  });
});

// Actualizar un producto
app.put('/productos/:id', (req, res) => {
  const { id } = req.params;
  const { Nombre_Producto, Descripción, Precio, Tipo } = req.body;
  const query = 'UPDATE Productos SET Nombre_Producto = ?, Descripción = ?, Precio = ?, Tipo = ? WHERE ID_Producto = ?';
  connection.query(query, [Nombre_Producto, Descripción, Precio, Tipo, id], (err, results) => {
      if (err) {
          console.error('Error al actualizar producto:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.send('Producto actualizado exitosamente');
      }
  });
});

// Eliminar un producto
app.delete('/productos/:id', (req, res) => {
  const { id } = req.params;
  const query = 'DELETE FROM Productos WHERE ID_Producto = ?';
  connection.query(query, [id], (err, results) => {
      if (err) {
          console.error('Error al eliminar producto:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.send('Producto eliminado exitosamente');
      }
  });
});
app.post('/metodos_pago', (req, res) => {
  const { Nombre_Metodo } = req.body;
  const query = 'INSERT INTO Metodos_Pago (Nombre_Metodo) VALUES (?)';
  connection.query(query, [Nombre_Metodo], (err, results) => {
      if (err) {
          console.error('Error al crear método de pago:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.status(201).send('Método de pago creado exitosamente');
      }
  });
});

// Obtener todos los métodos de pago
app.get('/metodos_pago', (req, res) => {
  const query = 'SELECT * FROM Metodos_Pago';
  connection.query(query, (err, results) => {
      if (err) {
          console.error('Error al obtener métodos de pago:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.json(results);
      }
  });
});

// Actualizar un método de pago
app.put('/metodos_pago/:id', (req, res) => {
  const { id } = req.params;
  const { Nombre_Metodo } = req.body;
  const query = 'UPDATE Metodos_Pago SET Nombre_Metodo = ? WHERE ID_Metodo = ?';
  connection.query(query, [Nombre_Metodo, id], (err, results) => {
      if (err) {
          console.error('Error al actualizar método de pago:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.send('Método de pago actualizado exitosamente');
      }
  });
});

// Eliminar un método de pago
app.delete('/metodos_pago/:id', (req, res) => {
  const { id } = req.params;
  const query = 'DELETE FROM Metodos_Pago WHERE ID_Metodo = ?';
  connection.query(query, [id], (err, results) => {
      if (err) {
          console.error('Error al eliminar método de pago:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.send('Método de pago eliminado exitosamente');
      }
  });
});

app.post('/pedidos', (req, res) => {
  const { Fecha, ID_Cliente, Total, ID_Metodo } = req.body;
  const query = 'INSERT INTO Pedidos (Fecha, ID_Cliente, Total, ID_Metodo) VALUES (?, ?, ?, ?)';
  connection.query(query, [Fecha, ID_Cliente, Total, ID_Metodo], (err, results) => {
      if (err) {
          console.error('Error al crear pedido:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.status(201).send('Pedido creado exitosamente');
      }
  });
});

// Obtener todos los pedidos
app.get('/pedidos', (req, res) => {
  const query = 'SELECT * FROM Pedidos';
  connection.query(query, (err, results) => {
      if (err) {
          console.error('Error al obtener los pedidos:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.json(results);
      }
  });
});

// Actualizar un pedido
app.put('/pedidos/:id', (req, res) => {
  const { id } = req.params;
  const { Fecha, ID_Cliente, Total, ID_Metodo } = req.body;
  const query = 'UPDATE Pedidos SET Fecha = ?, ID_Cliente = ?, Total = ?, ID_Metodo = ? WHERE IDPedido = ?';
  connection.query(query, [Fecha, ID_Cliente, Total, ID_Metodo, id], (err, results) => {
      if (err) {
          console.error('Error al actualizar pedido:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.send('Pedido actualizado exitosamente');
      }
  });
});

// Eliminar un pedido
app.delete('/pedidos/:id', (req, res) => {
  const { id } = req.params;
  const query = 'DELETE FROM Pedidos WHERE IDPedido = ?';
  connection.query(query, [id], (err, results) => {
      if (err) {
          console.error('Error al eliminar pedido:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.send('Pedido eliminado exitosamente');
      }
  });
});

app.post('/proveedores', (req, res) => {
  const { Nombre_Proveedor, Contacto, Teléfono } = req.body;
  const query = 'INSERT INTO Proveedores (Nombre_Proveedor, Contacto, Teléfono) VALUES (?, ?, ?)';
  connection.query(query, [Nombre_Proveedor, Contacto, Teléfono], (err, results) => {
      if (err) {
          console.error('Error al crear proveedor:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.status(201).send('Proveedor creado exitosamente');
      }
  });
});

// Obtener todos los proveedores
app.get('/proveedores', (req, res) => {
  const query = 'SELECT * FROM Proveedores';
  connection.query(query, (err, results) => {
      if (err) {
          console.error('Error al obtener proveedores:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.json(results);
      }
  });
});

// Actualizar un proveedor
app.put('/proveedores/:id', (req, res) => {
  const { id } = req.params;
  const { Nombre_Proveedor, Contacto, Teléfono } = req.body;
  const query = 'UPDATE Proveedores SET Nombre_Proveedor = ?, Contacto = ?, Teléfono = ? WHERE ID_Proveedor = ?';
  connection.query(query, [Nombre_Proveedor, Contacto, Teléfono, id], (err, results) => {
      if (err) {
          console.error('Error al actualizar proveedor:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.send('Proveedor actualizado exitosamente');
      }
  });
});

// Eliminar un proveedor
app.delete('/proveedores/:id', (req, res) => {
  const { id } = req.params;
  const query = 'DELETE FROM Proveedores WHERE ID_Proveedor = ?';
  connection.query(query, [id], (err, results) => {
      if (err) {
          console.error('Error al eliminar proveedor:', err);
          res.status(500).send('Error en el servidor');
      } else {
          res.send('Proveedor eliminado exitosamente');
      }
  });
});


// Iniciar el servidor
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Servidor ejecutándose en http://localhost:${PORT}`);
});

